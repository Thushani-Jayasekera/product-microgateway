# The logging configuration for Adapter

## Adapter root Level configurations

logfile = "logs/adapter.log" # This file will be created inside adapter container.
logLevel = "INFO" # LogLevels can be "DEBG", "FATL", "ERRO", "WARN", "INFO", "PANC"

[rotation]
MaxSize = 10    # In MegaBytes (MB)
MaxBackups = 3
MaxAge =  2   # In days
Compress = true

## Adapter package Level configurations

[[pkg]]
name = "github.com/wso2/product-microgateway/adapter/internal/adapter"
logLevel = "INFO" # LogLevels can be "DEBG", "FATL", "ERRO", "WARN", "INFO", "PANC"

[[pkg]]
name = "github.com/wso2/product-microgateway/adapter/internal/oasparser"
logLevel = "INFO"


# The logging configuration for Router

[accessLogs]
enable = true
logfile = "/dev/stdout" # This file will be created inside router container.
logType = "json" # LogTypes can be "text" or "json"

[accessLogs.excludes]
[accessLogs.excludes.systemHost]
enabled = true
pathRegex = "^(/health|/ready)$" # keep this empty to match all paths

# Log format that is append after "reservedLogFormat". This can be used by dev for debug purpose.
# For example: secondaryLogFormat = "'%REQUEST_TX_DURATION%' '%RESPONSE_TX_DURATION%'"
#
# Following is the default value of 'reservedLogFormat'
# Here '%ROUTE_NAME%' equals '<API_UUID>'
# reservedLogFormat: "[%START_TIME%]' '%DYNAMIC_METADATA(envoy.filters.http.ext_authz:originalHost)%' " +
# "'%REQ(:AUTHORITY)%' '%REQ(:METHOD)%' '%DYNAMIC_METADATA(envoy.filters.http.ext_authz:originalPath)%' " +
# "'%REQ(:PATH)%' '%PROTOCOL%' '%RESPONSE_CODE%' '%RESPONSE_CODE_DETAILS%' '%RESPONSE_FLAGS%' '%REQ(USER-AGENT)%' " +
# "'%REQ(X-REQUEST-ID)%' '%REQ(X-FORWARDED-FOR)%' '%UPSTREAM_HOST%' '%BYTES_RECEIVED%' '%BYTES_SENT%' '%DURATION%' " +
# "'%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%' '%REQUEST_TX_DURATION%' '%RESPONSE_TX_DURATION%' '%REQUEST_DURATION%' " +
# "'%RESPONSE_DURATION%' '%DYNAMIC_METADATA(envoy.filters.http.ext_authz:apiUUID)%' " +
# "'%DYNAMIC_METADATA(envoy.filters.http.ext_authz:extAuthDetails)%' '"
secondaryLogFormat = ""

[accessLogs.jSONFormat]
time = "%START_TIME%"
gwHost = "%DYNAMIC_METADATA(envoy.filters.http.ext_authz:originalHost)%"
host = "%REQ(:AUTHORITY)%"
method = "%REQ(:METHOD)%"
apiPath = "%DYNAMIC_METADATA(envoy.filters.http.ext_authz:originalPath)%"
upstrmPath = "%REQ(:PATH)%"
prot = "%PROTOCOL%"
respCode = "%RESPONSE_CODE%"
respCodeDtls = "%RESPONSE_CODE_DETAILS%"
respFlag = "%RESPONSE_FLAGS%"
ua = "%REQ(USER-AGENT)%"
reqId = "%REQ(X-REQUEST-ID)%"
xff = "%REQ(X-FORWARDED-FOR)%"
upstrmHost = "%UPSTREAM_HOST%"
bytesRecv = "%BYTES_RECEIVED%"
bytesSent = "%BYTES_SENT%"
dur = "%DURATION%"
upstrmSvcTime = "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
reqTxDur = "%REQUEST_TX_DURATION%"
respTxDur = "%RESPONSE_TX_DURATION%"
reqDur = "%REQUEST_DURATION%"
respDur = "%RESPONSE_DURATION%"
apiUUID = "%DYNAMIC_METADATA(envoy.filters.http.ext_authz:apiUUID)%"
extAuthDtls = "%DYNAMIC_METADATA(envoy.filters.http.ext_authz:extAuthDetails)%"
